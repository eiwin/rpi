######################################################
########################workpath######################
######################################################
/home/pi/py

# update to the latest version
sudo apt-get update
sudo apt-get upgrade -y
######################################################
########################Packages######################
######################################################
# GPIO
sudo apt-get install rpi.gpio -y

# serial
sudo apt-get install python3-serial -y

# pip3
sudo apt-get install python3-pip -y

# bme280
sudo pip3 install adafruit-circuitpython-bme280

######################################################
########################Enalbe RTC####################
######################################################
https://thepihut.com/blogs/raspberry-pi-tutorials/17209332-adding-a-real-time-clock-to-your-raspberry-pi

sudo i2cdetect -y 1
The RTC module must be loaded by the kernel by running:
    sudo modprobe rtc-ds1307
Now you need to be running as the super user; type in:
    sudo bash
and then, if you have a Rev.2 Raspberry Pi or later:
    echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device
Or if you have the older Rev.1 Raspberry Pi, use:
    echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-0/new_device
Type 
    exit 
to stop being the 'root' user.
Check the time on the RTC device using:
    sudo hwclock -r
Run sudo hwclock -w to write the system time to the RTC board.
You will need to add the RTC kernel module to the file /etc/modules so it is loaded when the Raspberry Pi boots. 
In a terminal window run 
    sudo nano /etc/modules 
and add rtc-ds1307 at the end of the file
Next you will need to add the DS1307 device creation at boot by editing the /etc/rc.local file by running
    sudo nano /etc/rc.local
and add the following lines to the file:
    echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device
    sudo hwclock -s
    date
Just before the exit 0. 

######################################################
########################Enable Service################
######################################################
sudo systemctl enable thpm_welcome.service
#/lib/systemd/system
########################welcom########################
[Unit]
Description=THP Monitor Welcome----------------------
#After=dev-serial1.device
#Before=local-fs.target
DefaultDependencies=false

[Service]
WorkingDirectory=/home/pi/
User=root
ExecStart=python3 /home/pi/py/thp_monitor/script/com.main/run/welcome.py
#Restart=always

[Install]
WantedBy=local-fs.target
#####################################################

sudo systemctl enable thpm_main.service
#/lib/systemd/system
#######################main##########################
[Unit]
Description=THP Monitor Main--------------------------------
After=multi-user.target
#Before=local-fs.target
#DefaultDependencies=false

[Service]
WorkingDirectory=/home/pi/
User=root
ExecStart=python3 /home/pi/py/thp_monitor/script/com.main/run/main.py
Restart=always

[Install]
WantedBy=multi-user.target
#####################################################

######################################################
########################Make boot faster##############
######################################################
 0.change baudrate of I2C bus. Because 10k is perfect for long distance
 dtparam=i2c_arm=on,i2c_arm_baudrate=10000
 
 1. Editing the /boot/config.txt with the following changes:
#disable audio
dtparam=audio=off
# Disable the rainbow splash screen
disable_splash=1
# Disable bluetooth
dtoverlay=pi3-disable-bt
# Set the bootloader delay to 0 seconds. The default is 1s if not specified.
boot_delay=0

 2. Make the kernel output less verbose by adding the "quiet" flag to the kernel command line in file /boot/cmdline.txt 

dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=32e07f87-02 rootfstype=ext4 elevator=deadline fsck.repair=yes quiet rootwait

 3. disable the services that are not needed
sudo bash
systemctl disable keyboard-setup.service
systemctl disable dphys-swapfile.service
systemctl disable avahi-daemon.service
systemctl disable sys-kernel-debug.mount
systemctl disable raspi-config.service
systemctl disable systemd-udev-trigger.service
systemctl disable rpi-eeprom-update.service
systemctl disable rsyslog.service
systemctl disable systemd-journald.service
systemctl disable systemd-fsck-root.service
systemctl disable systemd-logind.service
systemctl disable bluetooth.service
systemctl disable hciuart.service
 
 4. static ip address.
run systemctl disable dhcpcd.service to disable dhcp, but modify /etc/network/interfaces as follows firstls:
source-directory /etc/network/interfaces
allow-hotplug wlan0
iface wlan0 inet static
address 192.168.51.106
netmask 255.255.255.0
gateway 192.168.51.1
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
#####################################################

-------------------------------------------------------
This is option for speaker. pigpiod is needed as PWM control

Issue: i2cdetect command not found
sudo apt-get update
sudo apt-get install i2c-tools

#pigpio PWM
sudo apt-get install python3-pigpio
sudo systemctl enable pigpiod

will enable it to auto-start on boot.

sudo systemctl start pigpiod 

will start it immediately (just a posh way of doing

sudo pigpiod

:)

If you change your mind,

sudo systemctl disable pigpiod

will undo the start-up behaviour. Similarly,

sudo systemctl stop pigpiod

will have an immediate effect.
